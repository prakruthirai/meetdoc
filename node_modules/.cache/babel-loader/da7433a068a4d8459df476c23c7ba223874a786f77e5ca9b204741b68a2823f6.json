{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAKRUTHI\\\\OneDrive\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//   const [authTokens, setAuthTokens] = useState(null);\n//   const [user, setUser] = useState(null);\n\n//   const navigate = useNavigate();\n//   const loginUser = async (username, password) => {\n//     try {\n//         const response = await fetch(\n//             \"http://127.0.0.1:8000/api/authentication/login\",\n//             {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({\n//                     username: username,\n//                     password: password,\n//                 }),\n//             }\n//         );\n\n//         if (!response.ok) {\n//             throw new Error(\"Failed to authenticate\");\n//         }\n\n//         const data = await response.json();\n//         console.log(\"Response data:\", data);\n\n//         if (data && data.data && data.data.access_token) {\n//             setAuthTokens(data.data);\n//             setUser(jwtDecode(data.data.access_token));\n//             localStorage.setItem(\"authTokens\", JSON.stringify(data.data));\n//             navigate(\"/\");\n//         } else {\n//             console.error(\"Invalid token received:\", data.data.access_token);\n//             throw new Error(\"Invalid token received\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error occurred during login:\", error);\n//         alert(\"Failed to authenticate. Please try again.\");\n//     }\n// };\n\n//   const logoutUser = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n\n//   const updateToken = async () => {\n//     console.log(\"Update token called\");\n//     try {\n//       const response = await fetch(\n//         \"http://127.0.0.1:8000/api/authentication/refresh\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             refresh: authTokens.refresh_token,\n//           }),\n//         }\n//       );\n//       if (response.ok) {\n//         const data = await response.json();\n//         setAuthTokens(data);\n//         setUser(jwtDecode(data.access_token));\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//       } else {\n//         throw new Error(\"Failed to refresh token\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error occurred during token refresh:\", error);\n//       logoutUser();\n//     }\n//   };\n\n//   return { user, loginUser, logoutUser };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\n\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { useNavigate } from 'react-router-dom';\nimport baseURL from \"../Api/Config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  // const [loginMessage, setLoginMessage] = useState('');\n  // const [refreshMessage, setRefreshMessage] = useState('');\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   const data = JSON.parse(localStorage.getItem('authTokens'));\n  //   if (data && data.access_token) {\n  //     setAuthTokens(data);\n  //     setUser(jwtDecode(data.access_token));\n  //   }\n  // }, []);\n\n  const refreshTokens = useCallback(async () => {\n    console.log(\"Calling refresh token\");\n    try {\n      // Check if authTokens is null\n      if (!authTokens) {\n        console.error('User is not authenticated.');\n        return false;\n      }\n      // const expirationTime = Math.floor(Date.now() / 1000) + 10;\n      const response = await axios.post(`${baseURL}/api/authentication/refresh`, {\n        refresh_token: authTokens.refresh_token\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        console.log(data);\n        // setAuthTokens(data[\"data\"]);\n        setAuthTokens({\n          ...authTokens,\n          access_token: data[\"access_token\"]\n        });\n        setUser(jwtDecode(data[\"access_token\"]));\n        // localStorage.setItem('accessToken', JSON.stringify(data[\"access_token\"]));\n        // localStorage.setItem('refreshToken', JSON.stringify(data[\"refresh_token\"]));\n        localStorage.setItem('accessToken', JSON.stringify(data[\"access_token\"]));\n        // localStorage.setItem('refreshToken', JSON.stringify(data[\"data\"][\"refresh_token\"]));\n        console.log('Token refreshed successfully');\n\n        // const tokenExpirationTime = jwtDecode(data[\"access_token\"]).exp * 1000\n        // const currentTime = Date.now();\n        // const timeUntilExpiration = tokenExpirationTime - currentTime;\n\n        // setTimeout(refreshTokens, timeUntilExpiration - 5000);\n\n        return true;\n      } else {\n        console.error('Token refresh Failed:', response.data);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error occured during token refresh:', error);\n      return false;\n    }\n  }, [authTokens]);\n  useEffect(() => {\n    if (authTokens) {\n      const tokenExpirationTime = jwtDecode(authTokens.access_token).exp * 1000;\n      const currentTime = Date.now();\n      const timeUntilExpiration = tokenExpirationTime - currentTime;\n      const refreshBefore = timeUntilExpiration - 5000;\n      const timeoutId = setTimeout(refreshTokens, refreshBefore);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [authTokens, refreshTokens]);\n\n  // LOGIN\n  const loginUser = async (username, password) => {\n    console.log(\"trying to log in\");\n    try {\n      const response = await axios.post(`${baseURL}/api/authentication/login`, {\n        username,\n        password\n      });\n      const data = response.data;\n      console.log(data);\n      if (response.status === 200 && data[\"data\"][\"access_token\"]) {\n        setAuthTokens(data[\"data\"]);\n        setUser(jwtDecode(data[\"data\"][\"access_token\"]));\n        // localStorage.setItem('authTokens', JSON.stringify(data));\n        localStorage.setItem('accessToken', JSON.stringify(data[\"data\"][\"access_token\"]));\n        localStorage.setItem('refreshToken', JSON.stringify(data[\"data\"][\"refresh_token\"]));\n        navigate('/');\n        return true;\n      } else {\n        alert('Something went wrong!');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error occurred during login:', error);\n      alert('Failed to authenticate. Please try again.');\n      return false;\n    }\n  };\n\n  // LOGOUT\n\n  const logoutUser = async () => {\n    if (!authTokens) {\n      console.warn('User is not logged in, cannot logout.');\n      return; // Exit the function if not logged in\n    }\n    try {\n      const response = await axios.post(`${baseURL}/api/authentication/logout`, {\n        refresh_token: authTokens.refresh_token\n      });\n      if (response.status === 200 || response.status === 204) {\n        // Logout successful\n        setAuthTokens(null);\n        setUser(null);\n        localStorage.removeItem('authTokens');\n        navigate('/login');\n      } else {\n        // Handle unexpected response status\n        console.error('Unexpected response while logging out:', response);\n      }\n    } catch (error) {\n      // Handle network errors or other exceptions\n      console.error('Error occurred during logout:', error);\n      // You may also want to provide user-friendly feedback here\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authTokens,\n      user,\n      loginUser,\n      logoutUser,\n      refreshTokens\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"tAbfYnFYCXTYsiBEjqOnDHIEJuQ=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","axios","jwtDecode","useNavigate","baseURL","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authTokens","setAuthTokens","user","setUser","navigate","refreshTokens","console","log","error","response","post","refresh_token","status","data","access_token","localStorage","setItem","JSON","stringify","tokenExpirationTime","exp","currentTime","Date","now","timeUntilExpiration","refreshBefore","timeoutId","setTimeout","clearTimeout","loginUser","username","password","alert","logoutUser","warn","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//   const [authTokens, setAuthTokens] = useState(null);\r\n//   const [user, setUser] = useState(null);\r\n\r\n//   const navigate = useNavigate();\r\n//   const loginUser = async (username, password) => {\r\n//     try {\r\n//         const response = await fetch(\r\n//             \"http://127.0.0.1:8000/api/authentication/login\",\r\n//             {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     username: username,\r\n//                     password: password,\r\n//                 }),\r\n//             }\r\n//         );\r\n\r\n//         if (!response.ok) {\r\n//             throw new Error(\"Failed to authenticate\");\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         console.log(\"Response data:\", data);\r\n\r\n//         if (data && data.data && data.data.access_token) {\r\n//             setAuthTokens(data.data);\r\n//             setUser(jwtDecode(data.data.access_token));\r\n//             localStorage.setItem(\"authTokens\", JSON.stringify(data.data));\r\n//             navigate(\"/\");\r\n//         } else {\r\n//             console.error(\"Invalid token received:\", data.data.access_token);\r\n//             throw new Error(\"Invalid token received\");\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error occurred during login:\", error);\r\n//         alert(\"Failed to authenticate. Please try again.\");\r\n//     }\r\n// };\r\n\r\n\r\n\r\n//   const logoutUser = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   const updateToken = async () => {\r\n//     console.log(\"Update token called\");\r\n//     try {\r\n//       const response = await fetch(\r\n//         \"http://127.0.0.1:8000/api/authentication/refresh\",\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             refresh: authTokens.refresh_token,\r\n//           }),\r\n//         }\r\n//       );\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         setAuthTokens(data);\r\n//         setUser(jwtDecode(data.access_token));\r\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//       } else {\r\n//         throw new Error(\"Failed to refresh token\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error occurred during token refresh:\", error);\r\n//       logoutUser();\r\n//     }\r\n//   };\r\n\r\n//   return { user, loginUser, logoutUser };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n\r\nimport { createContext, useState, useEffect, useCallback } from \"react\";\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport baseURL from \"../Api/Config\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [authTokens, setAuthTokens] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  // const [loginMessage, setLoginMessage] = useState('');\r\n  // const [refreshMessage, setRefreshMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // useEffect(() => {\r\n  //   const data = JSON.parse(localStorage.getItem('authTokens'));\r\n  //   if (data && data.access_token) {\r\n  //     setAuthTokens(data);\r\n  //     setUser(jwtDecode(data.access_token));\r\n  //   }\r\n  // }, []);\r\n\r\n  const refreshTokens = useCallback(async () => {\r\n    console.log(\"Calling refresh token\");\r\n    try {\r\n      // Check if authTokens is null\r\n      if (!authTokens) {\r\n        console.error('User is not authenticated.');\r\n        return false;\r\n      }\r\n      // const expirationTime = Math.floor(Date.now() / 1000) + 10;\r\n      const response = await axios.post(`${baseURL}/api/authentication/refresh`, {\r\n        refresh_token: authTokens.refresh_token\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const data = response.data;\r\n        console.log(data)\r\n        // setAuthTokens(data[\"data\"]);\r\n        setAuthTokens({ ...authTokens, access_token: data[\"access_token\"] });\r\n        setUser(jwtDecode(data[\"access_token\"]));\r\n        // localStorage.setItem('accessToken', JSON.stringify(data[\"access_token\"]));\r\n        // localStorage.setItem('refreshToken', JSON.stringify(data[\"refresh_token\"]));\r\n        localStorage.setItem('accessToken', JSON.stringify(data[\"access_token\"]));\r\n        // localStorage.setItem('refreshToken', JSON.stringify(data[\"data\"][\"refresh_token\"]));\r\n        console.log('Token refreshed successfully');\r\n\r\n        // const tokenExpirationTime = jwtDecode(data[\"access_token\"]).exp * 1000\r\n        // const currentTime = Date.now();\r\n        // const timeUntilExpiration = tokenExpirationTime - currentTime;\r\n\r\n        // setTimeout(refreshTokens, timeUntilExpiration - 5000);\r\n\r\n        return true;\r\n      } else {\r\n        console.error('Token refresh Failed:', response.data);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error occured during token refresh:', error)\r\n      return false;\r\n    }\r\n  }, [authTokens]);\r\n\r\n  useEffect(() => {\r\n    if (authTokens) {\r\n      const tokenExpirationTime = jwtDecode(authTokens.access_token).exp * 1000;\r\n      const currentTime = Date.now();\r\n      const timeUntilExpiration = tokenExpirationTime - currentTime;\r\n      const refreshBefore = timeUntilExpiration - 5000;\r\n\r\n      const timeoutId = setTimeout(refreshTokens, refreshBefore);\r\n\r\n      return () => clearTimeout(timeoutId);\r\n\r\n    }\r\n  }, [authTokens, refreshTokens]);\r\n\r\n// LOGIN\r\n  const loginUser = async (username, password) => {\r\n    console.log(\"trying to log in\");\r\n    try {\r\n      const response = await axios.post(`${baseURL}/api/authentication/login`, {\r\n        username,\r\n        password\r\n      });\r\n\r\n      const data = response.data;\r\n      console.log(data);\r\n      if (response.status === 200 && data[\"data\"][\"access_token\"]) {\r\n        setAuthTokens(data[\"data\"]);\r\n        setUser(jwtDecode(data[\"data\"][\"access_token\"]));\r\n        // localStorage.setItem('authTokens', JSON.stringify(data));\r\n        localStorage.setItem('accessToken', JSON.stringify(data[\"data\"][\"access_token\"]));\r\n        localStorage.setItem('refreshToken', JSON.stringify(data[\"data\"][\"refresh_token\"]));\r\n\r\n        navigate('/');\r\n        return true;\r\n      } else {\r\n        alert('Something went wrong!');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error occurred during login:', error);\r\n      alert('Failed to authenticate. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // LOGOUT\r\n  \r\n  const logoutUser = async () => {\r\n    if (!authTokens) {\r\n      console.warn('User is not logged in, cannot logout.');\r\n      return; // Exit the function if not logged in\r\n    }\r\n    try {\r\n      const response = await axios.post(`${baseURL}/api/authentication/logout`, {\r\n        refresh_token: authTokens.refresh_token\r\n      });\r\n      if (response.status === 200 || response.status === 204) {\r\n        // Logout successful\r\n        setAuthTokens(null);\r\n        setUser(null);\r\n        localStorage.removeItem('authTokens');\r\n        navigate('/login');\r\n      } else {\r\n        // Handle unexpected response status\r\n        console.error('Unexpected response while logging out:', response);\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors or other exceptions\r\n      console.error('Error occurred during logout:', error);\r\n      // You may also want to provide user-friendly feedback here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authTokens, user, loginUser, logoutUser, refreshTokens }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}