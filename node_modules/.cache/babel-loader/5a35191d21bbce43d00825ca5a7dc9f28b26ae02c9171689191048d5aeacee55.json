{"ast":null,"code":"// import React, {createContext, useState} from 'react'\n\n// const AuthContext = createContext()\n\n// const AuthProvider = ({children}) => {\n\n//     let [authTokens, setAuthTokens] = useState(null)\n//     let [user, setUser] = useState(null)\n\n//     let loginUser = async (e )=> {\n//         e.preventDefault()\n//         let response = fetch('http://127.0.0.1:8000/api/token/',{\n//             method:'POST',\n//             headers:{ \n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n//         })\n\n//         let data = await response.json()\n//         console.log('data:', data)\n//     }\n//     let contextData = {\n//         loginUser:loginUser\n\n//     }\n//     return(\n//         <AuthContext.Provider value={contextData}>\n//             {children}\n//         </AuthContext.Provider>\n//     )\n\n// }\n\n// export {AuthContext, AuthProvider};\n\n// 2nd update\n\n// import React, { createContext, useEffect, useState } from 'react';\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from 'react-router-dom'\n\n// const AuthContext = createContext();\n\n// const AuthProvider = ({ children }) => {\n\n//     const [authTokens, setAuthTokens] = useState(null);\n//     const [user, setUser] = useState(null);\n//     const [loading, setLoading] = useState(true)\n\n//     const navigate = useNavigate()\n\n//     const loginUser = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'username': e.target.username.value,\n//                     'password': e.target.password.value\n//                 })\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Failed to authenticate');\n//             }\n//             const data = await response.json();\n//             if(response.status === 200){\n//                 setAuthTokens(data)\n//                 setUser(jwtDecode(data.access))\n//                 localStorage.setItem(authTokens,JSON.stringify(data))\n//                 navigate('/')\n//             }else{\n//                 alert('Something went wrong!!')\n//             }\n\n//             // console.log('data:', data);\n//             // console.log('response:', response);\n//             // Assuming your server returns authentication tokens, setAuthTokens(data.tokens) here\n//             // Similarly, set user details using setUser(data.user)\n//         } catch (error) {\n//             console.error('Error occurred during login:', error);\n//         }\n//     };\n\n//     let logoutUser = () => {\n//         setAuthTokens(null)\n//         setUser(null)\n//         localStorage.removeItem('authTokens')\n//         navigate('/login')\n//     }\n\n//     const updateToken = async ()=> {\n//         console.log('Update token called')\n//         const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'refresh': authTokens.refresh})\n//                 })\n//                 let data= await response.json()\n\n//                 if(response.status===200){\n//                     setAuthTokens(data)\n//                     setUser(jwtDecode(data.access))\n//                     localStorage.setItem(authTokens,JSON.stringify(data))\n//                 }else{\n//                     logoutUser()\n//                 }\n\n//     const contextData = {\n//         user:user,\n//         loginUser: loginUser,\n//         logoutUser:logoutUser\n//     };\n\n//     useEffect(()=>{\n//         let interval= setInterval(()=>{\n//             if(authTokens){\n//                 updateToken()\n//             }\n//         },2000)\n//         return ()=> clearInterval(interval)\n\n//     },[authTokens, loading])\n\n//     return (\n//         <AuthContext.Provider value={contextData}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n// }\n// export { AuthContext, AuthProvider };","map":{"version":3,"names":[],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, {createContext, useState} from 'react'\r\n\r\n\r\n// const AuthContext = createContext()\r\n\r\n\r\n// const AuthProvider = ({children}) => {\r\n\r\n//     let [authTokens, setAuthTokens] = useState(null)\r\n//     let [user, setUser] = useState(null)\r\n\r\n\r\n//     let loginUser = async (e )=> {\r\n//         e.preventDefault()\r\n//         let response = fetch('http://127.0.0.1:8000/api/token/',{\r\n//             method:'POST',\r\n//             headers:{ \r\n//                 'Content-Type':'application/json'\r\n//             },\r\n//             body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\r\n//         })\r\n\r\n//         let data = await response.json()\r\n//         console.log('data:', data)\r\n//     }\r\n//     let contextData = {\r\n//         loginUser:loginUser\r\n\r\n//     }\r\n//     return(\r\n//         <AuthContext.Provider value={contextData}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n\r\n// }\r\n\r\n// export {AuthContext, AuthProvider};\r\n\r\n\r\n// 2nd update\r\n\r\n// import React, { createContext, useEffect, useState } from 'react';\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const AuthProvider = ({ children }) => {\r\n\r\n//     const [authTokens, setAuthTokens] = useState(null);\r\n//     const [user, setUser] = useState(null);\r\n//     const [loading, setLoading] = useState(true)\r\n\r\n\r\n//     const navigate = useNavigate()\r\n\r\n//     const loginUser = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'username': e.target.username.value,\r\n//                     'password': e.target.password.value\r\n//                 })\r\n//             });\r\n//             if (!response.ok) {\r\n//                 throw new Error('Failed to authenticate');\r\n//             }\r\n//             const data = await response.json();\r\n//             if(response.status === 200){\r\n//                 setAuthTokens(data)\r\n//                 setUser(jwtDecode(data.access))\r\n//                 localStorage.setItem(authTokens,JSON.stringify(data))\r\n//                 navigate('/')\r\n//             }else{\r\n//                 alert('Something went wrong!!')\r\n//             }\r\n\r\n//             // console.log('data:', data);\r\n//             // console.log('response:', response);\r\n//             // Assuming your server returns authentication tokens, setAuthTokens(data.tokens) here\r\n//             // Similarly, set user details using setUser(data.user)\r\n//         } catch (error) {\r\n//             console.error('Error occurred during login:', error);\r\n//         }\r\n//     };\r\n\r\n//     let logoutUser = () => {\r\n//         setAuthTokens(null)\r\n//         setUser(null)\r\n//         localStorage.removeItem('authTokens')\r\n//         navigate('/login')\r\n//     }\r\n\r\n//     const updateToken = async ()=> {\r\n//         console.log('Update token called')\r\n//         const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'refresh': authTokens.refresh})\r\n//                 })\r\n//                 let data= await response.json()\r\n\r\n//                 if(response.status===200){\r\n//                     setAuthTokens(data)\r\n//                     setUser(jwtDecode(data.access))\r\n//                     localStorage.setItem(authTokens,JSON.stringify(data))\r\n//                 }else{\r\n//                     logoutUser()\r\n//                 }\r\n\r\n\r\n//     const contextData = {\r\n//         user:user,\r\n//         loginUser: loginUser,\r\n//         logoutUser:logoutUser\r\n//     };\r\n\r\n//     useEffect(()=>{\r\n//         let interval= setInterval(()=>{\r\n//             if(authTokens){\r\n//                 updateToken()\r\n//             }\r\n//         },2000)\r\n//         return ()=> clearInterval(interval)\r\n\r\n//     },[authTokens, loading])\r\n\r\n\r\n\r\n//     return (\r\n//         <AuthContext.Provider value={contextData}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// };\r\n// }\r\n// export { AuthContext, AuthProvider };\r\n"],"mappings":"AAAA;;AAGA;;AAGA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}