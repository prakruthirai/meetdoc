{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAKRUTHI\\\\OneDrive\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, {createContext, useState} from 'react'\n\n// const AuthContext = createContext()\n\n// const AuthProvider = ({children}) => {\n\n//     let [authTokens, setAuthTokens] = useState(null)\n//     let [user, setUser] = useState(null)\n\n//     let loginUser = async (e )=> {\n//         e.preventDefault()\n//         let response = fetch('http://127.0.0.1:8000/api/token/',{\n//             method:'POST',\n//             headers:{ \n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n//         })\n\n//         let data = await response.json()\n//         console.log('data:', data)\n//     }\n//     let contextData = {\n//         loginUser:loginUser\n\n//     }\n//     return(\n//         <AuthContext.Provider value={contextData}>\n//             {children}\n//         </AuthContext.Provider>\n//     )\n\n// }\n\n// export {AuthContext, AuthProvider};\n\n// 2nd update\n\n// import React, { createContext, useEffect, useState } from 'react';\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from 'react-router-dom'\n\n// const AuthContext = createContext();\n\n// const AuthProvider = ({ children }) => {\n\n//     const [authTokens, setAuthTokens] = useState(null);\n//     const [user, setUser] = useState(null);\n//     const [loading, setLoading] = useState(true)\n\n//     const navigate = useNavigate()\n\n//     const loginUser = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'username': e.target.username.value,\n//                     'password': e.target.password.value\n//                 })\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Failed to authenticate');\n//             }\n//             const data = await response.json();\n//             if(response.status === 200){\n//                 setAuthTokens(data)\n//                 setUser(jwtDecode(data.access))\n//                 localStorage.setItem(authTokens,JSON.stringify(data))\n//                 navigate('/')\n//             }else{\n//                 alert('Something went wrong!!')\n//             }\n\n//             // console.log('data:', data);\n//             // console.log('response:', response);\n//             // Assuming your server returns authentication tokens, setAuthTokens(data.tokens) here\n//             // Similarly, set user details using setUser(data.user)\n//         } catch (error) {\n//             console.error('Error occurred during login:', error);\n//         }\n//     };\n\n//     let logoutUser = () => {\n//         setAuthTokens(null)\n//         setUser(null)\n//         localStorage.removeItem('authTokens')\n//         navigate('/login')\n//     }\n\n//     const updateToken = async ()=> {\n//         console.log('Update token called')\n//         const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'refresh': authTokens.refresh})\n//                 })\n//                 let data= await response.json()\n\n//                 if(response.status===200){\n//                     setAuthTokens(data)\n//                     setUser(jwtDecode(data.access))\n//                     localStorage.setItem(authTokens,JSON.stringify(data))\n//                 }else{\n//                     logoutUser()\n//                 }\n\n//     const contextData = {\n//         user:user,\n//         loginUser: loginUser,\n//         logoutUser:logoutUser\n//     };\n\n//     useEffect(()=>{\n//         let interval= setInterval(()=>{\n//             if(authTokens){\n//                 updateToken()\n//             }\n//         },2000)\n//         return ()=> clearInterval(interval)\n\n//     },[authTokens, loading])\n\n//     return (\n//         <AuthContext.Provider value={contextData}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n// }\n// export { AuthContext, AuthProvider };\n\n// 3rd update\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst useAuth = () => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(null);\n  const [user, setUser] = useState(null);\n\n  // const navigate = useNavigate();\n\n  const loginUser = async (username, password) => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/token/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'username': username,\n          'password': password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to authenticate');\n      }\n      const data = await response.json();\n      if (response.status === 200) {\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n        navigate('/');\n      } else {\n        alert('Something went wrong!!');\n      }\n    } catch (error) {\n      console.error('Error occurred during login:', error);\n    }\n  };\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    navigate('/login');\n  };\n  const updateToken = async () => {\n    console.log('Update token called');\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'refresh': authTokens.refresh\n        })\n      });\n      if (response.status === 200) {\n        const data = await response.json();\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n      } else {\n        logoutUser();\n      }\n    } catch (error) {\n      console.error('Error occurred during token refresh:', error);\n      logoutUser();\n    }\n  };\n  useEffect(() => {\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [authTokens]);\n  return {\n    user,\n    loginUser,\n    logoutUser\n  };\n};\n_s(useAuth, \"vajPzXICFWy3zhTqgMw4+HbPteY=\");\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const auth = useAuth();\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"YuJWYXaKIY31b1y7U6yy3IXSxQA=\", false, function () {\n  return [useAuth];\n});\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jwtDecode","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","authTokens","setAuthTokens","user","setUser","loginUser","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","status","access","localStorage","setItem","navigate","alert","error","console","logoutUser","removeItem","updateToken","log","refresh","interval","setInterval","clearInterval","AuthProvider","children","_s2","auth","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, {createContext, useState} from 'react'\r\n\r\n\r\n// const AuthContext = createContext()\r\n\r\n\r\n// const AuthProvider = ({children}) => {\r\n\r\n//     let [authTokens, setAuthTokens] = useState(null)\r\n//     let [user, setUser] = useState(null)\r\n\r\n\r\n//     let loginUser = async (e )=> {\r\n//         e.preventDefault()\r\n//         let response = fetch('http://127.0.0.1:8000/api/token/',{\r\n//             method:'POST',\r\n//             headers:{ \r\n//                 'Content-Type':'application/json'\r\n//             },\r\n//             body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\r\n//         })\r\n\r\n//         let data = await response.json()\r\n//         console.log('data:', data)\r\n//     }\r\n//     let contextData = {\r\n//         loginUser:loginUser\r\n\r\n//     }\r\n//     return(\r\n//         <AuthContext.Provider value={contextData}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n\r\n// }\r\n\r\n// export {AuthContext, AuthProvider};\r\n\r\n\r\n// 2nd update\r\n\r\n// import React, { createContext, useEffect, useState } from 'react';\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const AuthProvider = ({ children }) => {\r\n\r\n//     const [authTokens, setAuthTokens] = useState(null);\r\n//     const [user, setUser] = useState(null);\r\n//     const [loading, setLoading] = useState(true)\r\n\r\n\r\n//     const navigate = useNavigate()\r\n\r\n//     const loginUser = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'username': e.target.username.value,\r\n//                     'password': e.target.password.value\r\n//                 })\r\n//             });\r\n//             if (!response.ok) {\r\n//                 throw new Error('Failed to authenticate');\r\n//             }\r\n//             const data = await response.json();\r\n//             if(response.status === 200){\r\n//                 setAuthTokens(data)\r\n//                 setUser(jwtDecode(data.access))\r\n//                 localStorage.setItem(authTokens,JSON.stringify(data))\r\n//                 navigate('/')\r\n//             }else{\r\n//                 alert('Something went wrong!!')\r\n//             }\r\n\r\n//             // console.log('data:', data);\r\n//             // console.log('response:', response);\r\n//             // Assuming your server returns authentication tokens, setAuthTokens(data.tokens) here\r\n//             // Similarly, set user details using setUser(data.user)\r\n//         } catch (error) {\r\n//             console.error('Error occurred during login:', error);\r\n//         }\r\n//     };\r\n\r\n//     let logoutUser = () => {\r\n//         setAuthTokens(null)\r\n//         setUser(null)\r\n//         localStorage.removeItem('authTokens')\r\n//         navigate('/login')\r\n//     }\r\n\r\n//     const updateToken = async ()=> {\r\n//         console.log('Update token called')\r\n//         const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'refresh': authTokens.refresh})\r\n//                 })\r\n//                 let data= await response.json()\r\n\r\n//                 if(response.status===200){\r\n//                     setAuthTokens(data)\r\n//                     setUser(jwtDecode(data.access))\r\n//                     localStorage.setItem(authTokens,JSON.stringify(data))\r\n//                 }else{\r\n//                     logoutUser()\r\n//                 }\r\n\r\n\r\n//     const contextData = {\r\n//         user:user,\r\n//         loginUser: loginUser,\r\n//         logoutUser:logoutUser\r\n//     };\r\n\r\n//     useEffect(()=>{\r\n//         let interval= setInterval(()=>{\r\n//             if(authTokens){\r\n//                 updateToken()\r\n//             }\r\n//         },2000)\r\n//         return ()=> clearInterval(interval)\r\n\r\n//     },[authTokens, loading])\r\n\r\n\r\n\r\n//     return (\r\n//         <AuthContext.Provider value={contextData}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// };\r\n// }\r\n// export { AuthContext, AuthProvider };\r\n\r\n\r\n// 3rd update\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst useAuth = () => {\r\n    const [authTokens, setAuthTokens] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n\r\n    // const navigate = useNavigate();\r\n\r\n    const loginUser = async (username, password) => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    'username': username,\r\n                    'password': password\r\n                })\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to authenticate');\r\n            }\r\n            const data = await response.json();\r\n            if(response.status === 200){\r\n                setAuthTokens(data);\r\n                setUser(jwtDecode(data.access));\r\n                localStorage.setItem('authTokens', JSON.stringify(data));\r\n                navigate('/');\r\n            } else {\r\n                alert('Something went wrong!!');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error occurred during login:', error);\r\n        }\r\n    };\r\n\r\n    const logoutUser = () => {\r\n        setAuthTokens(null);\r\n        setUser(null);\r\n        localStorage.removeItem('authTokens');\r\n        navigate('/login');\r\n    };\r\n\r\n    const updateToken = async () => {\r\n        console.log('Update token called');\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    'refresh': authTokens.refresh\r\n                })\r\n            });\r\n            if(response.status === 200) {\r\n                const data = await response.json();\r\n                setAuthTokens(data);\r\n                setUser(jwtDecode(data.access));\r\n                localStorage.setItem('authTokens', JSON.stringify(data));\r\n            } else {\r\n                logoutUser();\r\n            }\r\n        } catch (error) {\r\n            console.error('Error occurred during token refresh:', error);\r\n            logoutUser();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let interval = setInterval(() => {\r\n            if(authTokens) {\r\n                updateToken();\r\n            }\r\n        }, 2000);\r\n        return () => clearInterval(interval);\r\n    }, [authTokens]);\r\n\r\n    return { user, loginUser, logoutUser };\r\n};\r\n\r\nconst AuthProvider = ({ children }) => {\r\n    const auth = useAuth();\r\n    return (\r\n        <AuthContext.Provider value={auth}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}