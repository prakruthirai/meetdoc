{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAKRUTHI\\\\OneDrive\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, {createContext, useState} from 'react'\n\n// const AuthContext = createContext()\n\n// const AuthProvider = ({children}) => {\n\n//     let [authTokens, setAuthTokens] = useState(null)\n//     let [user, setUser] = useState(null)\n\n//     let loginUser = async (e )=> {\n//         e.preventDefault()\n//         let response = fetch('http://127.0.0.1:8000/api/token/',{\n//             method:'POST',\n//             headers:{ \n//                 'Content-Type':'application/json'\n//             },\n//             body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n//         })\n\n//         let data = await response.json()\n//         console.log('data:', data)\n//     }\n//     let contextData = {\n//         loginUser:loginUser\n\n//     }\n//     return(\n//         <AuthContext.Provider value={contextData}>\n//             {children}\n//         </AuthContext.Provider>\n//     )\n\n// }\n\n// export {AuthContext, AuthProvider};\n\n// import React, { createContext, useState } from 'react';\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from 'react-router-dom'\n\n// const AuthContext = createContext();\n\n// const AuthProvider = ({ children }) => {\n\n//     const [authTokens, setAuthTokens] = useState(null);\n//     const [user, setUser] = useState(null);\n\n//     const navigate = useNavigate()\n\n//     const loginUser = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'username': e.target.username.value,\n//                     'password': e.target.password.value\n//                 })\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Failed to authenticate');\n//             }\n//             const data = await response.json();\n//             if(response.status == 200){\n//                 setAuthTokens(data)\n//                 setUser(jwtDecode(data.access))\n//                 localStorage.setItem('authTokens',JSON.stringify(data))\n//                 navigate('/')\n//             }else{\n//                 alert('Something went wrong!!')\n//             }\n\n//             // console.log('data:', data);\n//             // console.log('response:', response);\n//             // Assuming your server returns authentication tokens, setAuthTokens(data.tokens) here\n//             // Similarly, set user details using setUser(data.user)\n//         } catch (error) {\n//             console.error('Error occurred during login:', error);\n//         }\n//     };\n\n//     // let logoutUser = () => {\n//     //     setAuthTokens(null)\n//     //     setUser(null)\n//     //     localStorage.removeItem('authTokens')\n//     //     navigate('/login')\n//     // }\n\n//     const contextData = {\n//         user:user,\n//         loginUser: loginUser,\n//         // logoutUser:logoutUser\n//     };\n\n//     return (\n//         <AuthContext.Provider value={contextData}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n\n// export { AuthContext, AuthProvider };\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(() => {\n    const storedTokens = localStorage.getItem('authTokens');\n    return storedTokens ? JSON.parse(storedTokens) : null;\n  });\n  const [user, setUser] = useState(() => {\n    const storedTokens = localStorage.getItem('authTokens');\n    return storedTokens ? jwt_decode(storedTokens) : null;\n  });\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const loginUser = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/token/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'username': e.target.username.value,\n          'password': e.target.password.value\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to authenticate');\n      }\n      const data = await response.json();\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      history.push('/');\n    } catch (error) {\n      console.error('Error occurred during login:', error);\n      alert('Something went wrong!');\n    }\n  };\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    history.push('/login');\n  };\n  const updateToken = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'refresh': authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n        })\n      });\n      if (response.status === 200) {\n        const data = await response.json();\n        setAuthTokens(data);\n        setUser(jwt_decode(data.access));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n      } else {\n        logoutUser();\n      }\n    } catch (error) {\n      console.error('Error occurred during token refresh:', error);\n      logoutUser();\n    }\n  };\n  useEffect(() => {\n    if (authTokens) {\n      setUser(jwt_decode(authTokens.access));\n    }\n    setLoading(false);\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [authTokens]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      authTokens,\n      setAuthTokens,\n      setUser,\n      loginUser,\n      logoutUser\n    },\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"VMGV4osu2EuX6i3un1cb71GVilU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwt_decode","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authTokens","setAuthTokens","storedTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","target","username","value","password","ok","Error","data","json","access","setItem","history","push","error","console","alert","logoutUser","removeItem","updateToken","refresh","status","interval","setInterval","clearInterval","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, {createContext, useState} from 'react'\r\n\r\n\r\n// const AuthContext = createContext()\r\n\r\n\r\n// const AuthProvider = ({children}) => {\r\n\r\n//     let [authTokens, setAuthTokens] = useState(null)\r\n//     let [user, setUser] = useState(null)\r\n\r\n\r\n//     let loginUser = async (e )=> {\r\n//         e.preventDefault()\r\n//         let response = fetch('http://127.0.0.1:8000/api/token/',{\r\n//             method:'POST',\r\n//             headers:{ \r\n//                 'Content-Type':'application/json'\r\n//             },\r\n//             body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\r\n//         })\r\n\r\n//         let data = await response.json()\r\n//         console.log('data:', data)\r\n//     }\r\n//     let contextData = {\r\n//         loginUser:loginUser\r\n\r\n//     }\r\n//     return(\r\n//         <AuthContext.Provider value={contextData}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n\r\n// }\r\n\r\n// export {AuthContext, AuthProvider};\r\n\r\n\r\n// import React, { createContext, useState } from 'react';\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const AuthProvider = ({ children }) => {\r\n\r\n//     const [authTokens, setAuthTokens] = useState(null);\r\n//     const [user, setUser] = useState(null);\r\n\r\n//     const navigate = useNavigate()\r\n\r\n//     const loginUser = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'username': e.target.username.value,\r\n//                     'password': e.target.password.value\r\n//                 })\r\n//             });\r\n//             if (!response.ok) {\r\n//                 throw new Error('Failed to authenticate');\r\n//             }\r\n//             const data = await response.json();\r\n//             if(response.status == 200){\r\n//                 setAuthTokens(data)\r\n//                 setUser(jwtDecode(data.access))\r\n//                 localStorage.setItem('authTokens',JSON.stringify(data))\r\n//                 navigate('/')\r\n//             }else{\r\n//                 alert('Something went wrong!!')\r\n//             }\r\n\r\n//             // console.log('data:', data);\r\n//             // console.log('response:', response);\r\n//             // Assuming your server returns authentication tokens, setAuthTokens(data.tokens) here\r\n//             // Similarly, set user details using setUser(data.user)\r\n//         } catch (error) {\r\n//             console.error('Error occurred during login:', error);\r\n//         }\r\n//     };\r\n\r\n//     // let logoutUser = () => {\r\n//     //     setAuthTokens(null)\r\n//     //     setUser(null)\r\n//     //     localStorage.removeItem('authTokens')\r\n//     //     navigate('/login')\r\n//     // }\r\n\r\n//     const contextData = {\r\n//         user:user,\r\n//         loginUser: loginUser,\r\n//         // logoutUser:logoutUser\r\n//     };\r\n\r\n//     return (\r\n//         <AuthContext.Provider value={contextData}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authTokens, setAuthTokens] = useState(() => {\r\n    const storedTokens = localStorage.getItem('authTokens');\r\n    return storedTokens ? JSON.parse(storedTokens) : null;\r\n  });\r\n  const [user, setUser] = useState(() => {\r\n    const storedTokens = localStorage.getItem('authTokens');\r\n    return storedTokens ? jwt_decode(storedTokens) : null;\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const loginUser = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ 'username': e.target.username.value, 'password': e.target.password.value })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to authenticate');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setAuthTokens(data);\r\n      setUser(jwt_decode(data.access));\r\n      localStorage.setItem('authTokens', JSON.stringify(data));\r\n      history.push('/');\r\n    } catch (error) {\r\n      console.error('Error occurred during login:', error);\r\n      alert('Something went wrong!');\r\n    }\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem('authTokens');\r\n    history.push('/login');\r\n  };\r\n\r\n  const updateToken = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ 'refresh': authTokens?.refresh })\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const data = await response.json();\r\n        setAuthTokens(data);\r\n        setUser(jwt_decode(data.access));\r\n        localStorage.setItem('authTokens', JSON.stringify(data));\r\n      } else {\r\n        logoutUser();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error occurred during token refresh:', error);\r\n      logoutUser();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (authTokens) {\r\n      setUser(jwt_decode(authTokens.access));\r\n    }\r\n    setLoading(false);\r\n\r\n    let interval = setInterval(() => {\r\n      if (authTokens) {\r\n        updateToken();\r\n      }\r\n    }, 2000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [authTokens]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, authTokens, setAuthTokens, setUser, loginUser, logoutUser }}>\r\n      {loading ? null : children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}