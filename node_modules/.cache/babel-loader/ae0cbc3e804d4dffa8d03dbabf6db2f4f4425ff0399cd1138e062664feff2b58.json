{"ast":null,"code":"// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//   const [authTokens, setAuthTokens] = useState(null);\n//   const [user, setUser] = useState(null);\n//   const [isAdmin, setIsAdmin] = useState(false);\n\n//   const navigate = useNavigate();\n//   const loginUser = async (username, password) =>     const loginUser = async (username, password) => {\n//     try {\n//         const response = await axios.post('http://127.0.0.1:8000/api/token/', {\n//             username: username,\n//             password: password\n//         });\n\n//         const data = response.data;\n\n//         if (response.status === 200) {\n//             setAuthTokens(data);\n//             setUser(jwtDecode(data.access));\n//             localStorage.setItem('authTokens', JSON.stringify(data));\n//             navigate('/');\n//         } else {\n//             alert('Something went wrong!');\n//         }\n//     } catch (error) {\n//         console.error('Error occurred during login:', error);\n//         alert('Failed to authenticate. Please try again.');\n//     }\n// };\n\n//   const logoutUser = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     setIsAdmin(false);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n\n//   // const updateToken = async () => {\n//   //   console.log(\"Update token called\");\n//   //   try {\n//   //     const response = await fetch(\n//   //       \"http://127.0.0.1:8000/api/authentication/refresh\",\n//   //       {\n//   //         method: \"POST\",\n//   //         headers: {\n//   //           \"Content-Type\": \"application/json\",\n//   //         },\n//   //         body: JSON.stringify({\n//   //           refresh: authTokens.refresh_token,\n//   //         }),\n//   //       }\n//   //     );\n//   //     if (response.ok) {\n//   //       const data = await response.json();\n//   //       setAuthTokens(data);\n//   //       setUser(jwtDecode(data.access_token));\n//   //       localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//   //     } else {\n//   //       throw new Error(\"Failed to refresh token\");\n//   //     }\n//   //   } catch (error) {\n//   //     console.error(\"Error occurred during token refresh:\", error);\n//   //     logoutUser();\n//   //   }\n//   // };\n\n//   useEffect(() => {\n\n//     if(authTokens){\n//       setUser(jwtDecode(authTokens.access_token))\n//     }  \n//      setLoading(false)\n// }, [authTokens, loading]);\n\n// return { user,isAdmin, loginUser, logoutUser };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\n\n// -----------------------------------------------\n\n// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n// import useAxios from '../utils/useAxios'; // Assuming useAxios is a custom hook for axios\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//   const [authTokens, setAuthTokens] = useState(null);\n//   const [user, setUser] = useState(null);\n//   const [isAdmin, setIsAdmin] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   const navigate = useNavigate();\n//   const api = useAxios();\n\n//   const loginUser = async (username, password) => {\n//     try {\n//       const response = await api.post('/api/authentication/login', {\n//         username: username,\n//         password: password\n//       });\n//       const data = response.data;\n\n//       if (response.status === 200) {\n//         setAuthTokens(data);\n//         setUser(jwtDecode(data.access));\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//         setIsAdmin(data.role === \"Admin\");\n//         navigate(\"/\");\n//       } else {\n//         alert(\"Something went wrong!\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error occurred during login:\", error);\n//       alert(\"Failed to authenticate. Please try again.\");\n//     }\n//   };\n\n//   const logoutUser = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     setIsAdmin(false);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n\n//   useEffect(() => {\n//     if (authTokens) {\n//       setUser(jwtDecode(authTokens.access));\n//     }\n//     setLoading(false);\n//   }, [authTokens]);\n\n//   return { user, isAdmin, loginUser, logoutUser, loading };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\n\n// ----------------------------------------------------\n\n// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import useAxios from '../utils/useAxios'; // Assuming useAxios is a custom hook for axios\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//     const [authTokens, setAuthTokens] = useState(null);\n//     const [user, setUser] = useState(null);\n//     const [isAdmin, setIsAdmin] = useState(false);\n//     const [loading, setLoading] = useState(true);\n\n//     const api = useAxios();\n\n//     const loginUser = async (username, password) => {\n//         try {\n//             const response = await api.post('/api/authentication/login', {\n//                 username: username,\n//                 password: password\n//             });\n//             const data = response.data;\n\n//             if (response.status === 200) {\n//                 setAuthTokens(data);\n//                 setUser(jwtDecode(data.access));\n//                 localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//                 setIsAdmin(data.role === \"Admin\");\n//             } else {\n//                 alert(\"Something went wrong!\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error occurred during login:\", error);\n//             alert(\"Failed to authenticate. Please try again.\");\n//         }\n//     };\n\n//     const logoutUser = () => {\n//         setAuthTokens(null);\n//         setUser(null);\n//         setIsAdmin(false);\n//         localStorage.removeItem(\"authTokens\");\n//     };\n\n//     useEffect(() => {\n//         if (authTokens) {\n//             setUser(jwtDecode(authTokens.access));\n//         }\n//         setLoading(false);\n//     }, [authTokens]);\n\n//     return { user, isAdmin, loginUser, logoutUser, loading };\n// };\n\n// const AuthProvider = ({ children }) => {\n//     const auth = useAuth();\n//     return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };","map":{"version":3,"names":[],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//   const [authTokens, setAuthTokens] = useState(null);\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n//   const navigate = useNavigate();\r\n//   const loginUser = async (username, password) =>     const loginUser = async (username, password) => {\r\n//     try {\r\n//         const response = await axios.post('http://127.0.0.1:8000/api/token/', {\r\n//             username: username,\r\n//             password: password\r\n//         });\r\n\r\n//         const data = response.data;\r\n\r\n//         if (response.status === 200) {\r\n//             setAuthTokens(data);\r\n//             setUser(jwtDecode(data.access));\r\n//             localStorage.setItem('authTokens', JSON.stringify(data));\r\n//             navigate('/');\r\n//         } else {\r\n//             alert('Something went wrong!');\r\n//         }\r\n//     } catch (error) {\r\n//         console.error('Error occurred during login:', error);\r\n//         alert('Failed to authenticate. Please try again.');\r\n//     }\r\n// };\r\n\r\n\r\n\r\n//   const logoutUser = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     setIsAdmin(false);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   // const updateToken = async () => {\r\n//   //   console.log(\"Update token called\");\r\n//   //   try {\r\n//   //     const response = await fetch(\r\n//   //       \"http://127.0.0.1:8000/api/authentication/refresh\",\r\n//   //       {\r\n//   //         method: \"POST\",\r\n//   //         headers: {\r\n//   //           \"Content-Type\": \"application/json\",\r\n//   //         },\r\n//   //         body: JSON.stringify({\r\n//   //           refresh: authTokens.refresh_token,\r\n//   //         }),\r\n//   //       }\r\n//   //     );\r\n//   //     if (response.ok) {\r\n//   //       const data = await response.json();\r\n//   //       setAuthTokens(data);\r\n//   //       setUser(jwtDecode(data.access_token));\r\n//   //       localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//   //     } else {\r\n//   //       throw new Error(\"Failed to refresh token\");\r\n//   //     }\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Error occurred during token refresh:\", error);\r\n//   //     logoutUser();\r\n//   //   }\r\n//   // };\r\n\r\n//   useEffect(() => {\r\n\r\n//     if(authTokens){\r\n//       setUser(jwtDecode(authTokens.access_token))\r\n//     }  \r\n//      setLoading(false)\r\n// }, [authTokens, loading]);\r\n\r\n// return { user,isAdmin, loginUser, logoutUser };\r\n// };\r\n\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n// -----------------------------------------------\r\n\r\n// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import useAxios from '../utils/useAxios'; // Assuming useAxios is a custom hook for axios\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//   const [authTokens, setAuthTokens] = useState(null);\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAdmin, setIsAdmin] = useState(false);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   const navigate = useNavigate();\r\n//   const api = useAxios();\r\n\r\n//   const loginUser = async (username, password) => {\r\n//     try {\r\n//       const response = await api.post('/api/authentication/login', {\r\n//         username: username,\r\n//         password: password\r\n//       });\r\n//       const data = response.data;\r\n\r\n//       if (response.status === 200) {\r\n//         setAuthTokens(data);\r\n//         setUser(jwtDecode(data.access));\r\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//         setIsAdmin(data.role === \"Admin\");\r\n//         navigate(\"/\");\r\n//       } else {\r\n//         alert(\"Something went wrong!\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error occurred during login:\", error);\r\n//       alert(\"Failed to authenticate. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const logoutUser = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     setIsAdmin(false);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (authTokens) {\r\n//       setUser(jwtDecode(authTokens.access));\r\n//     }\r\n//     setLoading(false);\r\n//   }, [authTokens]);\r\n\r\n//   return { user, isAdmin, loginUser, logoutUser, loading };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n// ----------------------------------------------------\r\n\r\n// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import useAxios from '../utils/useAxios'; // Assuming useAxios is a custom hook for axios\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//     const [authTokens, setAuthTokens] = useState(null);\r\n//     const [user, setUser] = useState(null);\r\n//     const [isAdmin, setIsAdmin] = useState(false);\r\n//     const [loading, setLoading] = useState(true);\r\n\r\n//     const api = useAxios();\r\n\r\n//     const loginUser = async (username, password) => {\r\n//         try {\r\n//             const response = await api.post('/api/authentication/login', {\r\n//                 username: username,\r\n//                 password: password\r\n//             });\r\n//             const data = response.data;\r\n\r\n//             if (response.status === 200) {\r\n//                 setAuthTokens(data);\r\n//                 setUser(jwtDecode(data.access));\r\n//                 localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//                 setIsAdmin(data.role === \"Admin\");\r\n//             } else {\r\n//                 alert(\"Something went wrong!\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error occurred during login:\", error);\r\n//             alert(\"Failed to authenticate. Please try again.\");\r\n//         }\r\n//     };\r\n\r\n//     const logoutUser = () => {\r\n//         setAuthTokens(null);\r\n//         setUser(null);\r\n//         setIsAdmin(false);\r\n//         localStorage.removeItem(\"authTokens\");\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (authTokens) {\r\n//             setUser(jwtDecode(authTokens.access));\r\n//         }\r\n//         setLoading(false);\r\n//     }, [authTokens]);\r\n\r\n//     return { user, isAdmin, loginUser, logoutUser, loading };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//     const auth = useAuth();\r\n//     return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n"],"mappings":"AAAA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}