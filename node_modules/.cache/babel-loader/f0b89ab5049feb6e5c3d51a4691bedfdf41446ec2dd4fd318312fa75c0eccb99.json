{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAKRUTHI\\\\OneDrive\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from 'react';\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// const useAuth = () => {\n//     const [authTokens, setAuthTokens] = useState(null);\n//     const [user, setUser] = useState();\n\n//     const navigate = useNavigate();\n\n//     const loginUser = async (username, password) => {\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'username': username,\n//                     'password': password\n//                 })\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Failed to authenticate');\n//             }\n//             const data = await response.json();\n//             if(response.status === 200){\n//                 setAuthTokens(data);\n//                 setUser(jwtDecode(data.access));\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\n//                 navigate('/');\n//             } else {\n//                 alert('Something went wrong!!');\n//             }\n//         } catch (error) {\n//             console.error('Error occurred during login:', error);\n//         }\n//     };\n//     const logoutUser = useCallback(() => {\n//         setAuthTokens(null);\n//         setUser(null);\n//         localStorage.removeItem('authTokens');\n//         navigate('/login');\n//     }, [setAuthTokens, setUser, navigate]);\n\n//     const updateToken = useCallback(async () => {\n//         console.log('Update token called');\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'refresh': authTokens.refresh\n//                 })\n//             });\n//             if(response.status === 200) {\n//                 const data = await response.json();\n//                 setAuthTokens(data);\n//                 setUser(jwtDecode(data.access));\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\n//             } else {\n//                 logoutUser();\n//             }\n//         } catch (error) {\n//             console.error('Error occurred during token refresh:', error);\n//             logoutUser();\n//         }\n//     }, [authTokens, setAuthTokens, setUser, logoutUser]);\n\n//     useEffect(() => {\n//         let interval = setInterval(() => {\n//             if(authTokens) {\n//                 updateToken();\n//             }\n//         }, 2000);\n//         return () => clearInterval(interval);\n//     }, [authTokens, updateToken]);\n\n//     return { user, loginUser, logoutUser };\n// };\n\n// const AuthProvider = ({ children }) => {\n//     const auth = useAuth();\n//     return (\n//         <AuthContext.Provider value={auth}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(null);\n  const [user, setUser] = useState();\n  const navigate = useNavigate();\n  const loginUser = async (username, password) => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/token/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'username': username,\n          'password': password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to authenticate');\n      }\n      const data = await response.json();\n      if (response.status === 200) {\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n        navigate('/');\n      } else {\n        alert('Something went wrong!!');\n      }\n    } catch (error) {\n      console.error('Error occurred during login:', error);\n    }\n  };\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    navigate('/login');\n  };\n  const updateToken = async () => {\n    console.log('Update token called');\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'refresh': authTokens.refresh\n        })\n      });\n      if (response.status === 200) {\n        const data = await response.json();\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n      } else {\n        logoutUser();\n      }\n    } catch (error) {\n      console.error('Error occurred during token refresh:', error);\n      logoutUser();\n    }\n  };\n  useEffect(() => {\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [authTokens]);\n  const auth = {\n    user: user,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"KzXYGlc04o+LeoGlnS1um3cI9sc=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jwtDecode","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authTokens","setAuthTokens","user","setUser","navigate","loginUser","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","status","access","localStorage","setItem","alert","error","console","logoutUser","removeItem","updateToken","log","refresh","interval","setInterval","clearInterval","auth","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//     const [authTokens, setAuthTokens] = useState(null);\r\n//     const [user, setUser] = useState();\r\n\r\n//     const navigate = useNavigate();\r\n\r\n//     const loginUser = async (username, password) => {\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'username': username,\r\n//                     'password': password\r\n//                 })\r\n//             });\r\n//             if (!response.ok) {\r\n//                 throw new Error('Failed to authenticate');\r\n//             }\r\n//             const data = await response.json();\r\n//             if(response.status === 200){\r\n//                 setAuthTokens(data);\r\n//                 setUser(jwtDecode(data.access));\r\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\r\n//                 navigate('/');\r\n//             } else {\r\n//                 alert('Something went wrong!!');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error occurred during login:', error);\r\n//         }\r\n//     };\r\n//     const logoutUser = useCallback(() => {\r\n//         setAuthTokens(null);\r\n//         setUser(null);\r\n//         localStorage.removeItem('authTokens');\r\n//         navigate('/login');\r\n//     }, [setAuthTokens, setUser, navigate]);\r\n\r\n//     const updateToken = useCallback(async () => {\r\n//         console.log('Update token called');\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'refresh': authTokens.refresh\r\n//                 })\r\n//             });\r\n//             if(response.status === 200) {\r\n//                 const data = await response.json();\r\n//                 setAuthTokens(data);\r\n//                 setUser(jwtDecode(data.access));\r\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\r\n//             } else {\r\n//                 logoutUser();\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error occurred during token refresh:', error);\r\n//             logoutUser();\r\n//         }\r\n//     }, [authTokens, setAuthTokens, setUser, logoutUser]);\r\n\r\n//     useEffect(() => {\r\n//         let interval = setInterval(() => {\r\n//             if(authTokens) {\r\n//                 updateToken();\r\n//             }\r\n//         }, 2000);\r\n//         return () => clearInterval(interval);\r\n//     }, [authTokens, updateToken]);\r\n\r\n//     return { user, loginUser, logoutUser };\r\n// };\r\n\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//     const auth = useAuth();\r\n//     return (\r\n//         <AuthContext.Provider value={auth}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// };\r\n\r\nconst AuthProvider = ({ children }) => {\r\n    const [authTokens, setAuthTokens] = useState(null);\r\n    const [user, setUser] = useState();\r\n    const navigate = useNavigate();\r\n\r\n    const loginUser = async (username, password) => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    'username': username,\r\n                    'password': password\r\n                })\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to authenticate');\r\n            }\r\n            const data = await response.json();\r\n            if(response.status === 200){\r\n                setAuthTokens(data);\r\n                setUser(jwtDecode(data.access));\r\n                localStorage.setItem('authTokens', JSON.stringify(data));\r\n                navigate('/');\r\n            } else {\r\n                alert('Something went wrong!!');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error occurred during login:', error);\r\n        }\r\n    };\r\n\r\n    const logoutUser = () => {\r\n        setAuthTokens(null);\r\n        setUser(null);\r\n        localStorage.removeItem('authTokens');\r\n        navigate('/login');\r\n    };\r\n\r\n    const updateToken = async () => {\r\n        console.log('Update token called');\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    'refresh': authTokens.refresh\r\n                })\r\n            });\r\n            if(response.status === 200) {\r\n                const data = await response.json();\r\n                setAuthTokens(data);\r\n                setUser(jwtDecode(data.access));\r\n                localStorage.setItem('authTokens', JSON.stringify(data));\r\n            } else {\r\n                logoutUser();\r\n            }\r\n        } catch (error) {\r\n            console.error('Error occurred during token refresh:', error);\r\n            logoutUser();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let interval = setInterval(() => {\r\n            if(authTokens) {\r\n                updateToken();\r\n            }\r\n        }, 2000);\r\n        return () => clearInterval(interval);\r\n    }, [authTokens]);\r\n\r\n    const auth = {\r\n        user:user,\r\n        loginUser:loginUser,\r\n        logoutUser:logoutUser,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={auth}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n\r\nexport { AuthContext, AuthProvider };\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}