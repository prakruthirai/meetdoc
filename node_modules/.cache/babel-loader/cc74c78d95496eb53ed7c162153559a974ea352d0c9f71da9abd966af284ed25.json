{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAKRUTHI\\\\OneDrive\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//   const [authTokens, setAuthTokens] = useState(null);\n//   const [user, setUser] = useState(null);\n//   const [isAdmin, setIsAdmin] = useState(false);\n//   const [loading, setLoading] = useState(false)\n\n//   const navigate = useNavigate();\n//   const loginUser = async (username, password) => {\n//     setLoading(true);\n//     try {\n//         const response = await axios.post('/api/authentication/login', {\n//             username: username,\n//             password: password\n//         });\n\n//         const data = response.data;\n\n//         if (response.status === 200 && data.access_token) {\n//             setAuthTokens(data);\n//             setUser(jwtDecode(data.access_token));\n//             localStorage.setItem('authTokens', JSON.stringify(data));\n//             navigate('/');\n//         } else {\n//             alert('Something went wrong!');\n//         }\n//     } catch (error) {\n//         console.error('Error occurred during login:', error);\n//         alert('Failed to authenticate. Please try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n// };\n\n//   const logoutUser = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     setIsAdmin(false);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n\n//   // const updateToken = async () => {\n//   //   console.log(\"Update token called\");\n//   //   try {\n//   //     const response = await fetch(\n//   //       \"http://127.0.0.1:8000/api/authentication/refresh\",\n//   //       {\n//   //         method: \"POST\",\n//   //         headers: {\n//   //           \"Content-Type\": \"application/json\",\n//   //         },\n//   //         body: JSON.stringify({\n//   //           refresh: authTokens.refresh_token,\n//   //         }),\n//   //       }\n//   //     );\n//   //     if (response.ok) {\n//   //       const data = await response.json();\n//   //       setAuthTokens(data);\n//   //       setUser(jwtDecode(data.access_token));\n//   //       localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//   //     } else {\n//   //       throw new Error(\"Failed to refresh token\");\n//   //     }\n//   //   } catch (error) {\n//   //     console.error(\"Error occurred during token refresh:\", error);\n//   //     logoutUser();\n//   //   }\n//   // };\n\n//   useEffect(() => {\n\n//     if(authTokens){\n//       setUser(jwtDecode(authTokens.access_token))\n//     }  \n//      setLoading(false)\n// }, [authTokens]);\n\n// return { user,isAdmin, loginUser, logoutUser, loading };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\n\n// // -----------------------------------------------\n\n// import axios from 'axios'; // Update this line\n// import { jwtDecode } from \"jwt-decode\";\n// import { createContext, useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import dayjs from 'dayjs';\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//   const [authTokens, setAuthTokens] = useState(null);\n//   const [user, setUser] = useState(null);\n//   const [isAdmin, setIsAdmin] = useState(false);\n//   const [loading, setLoading] = useState(false)\n\n//   const navigate = useNavigate();\n//   const loginUser = async (username, password) => {\n//     setLoading(true);\n//     try {\n//       const response = await axios.post('/api/authentication/login', {\n//         username: username,\n//         password: password\n//       });\n\n//       const data = response.data;\n\n//       if (response.status === 200 && data.access_token) {\n//         setAuthTokens(data);\n//         setUser(jwtDecode(data.access_token));\n//         localStorage.setItem('authTokens', JSON.stringify(data));\n//         navigate('/');\n//       } else {\n//         alert('Something went wrong!');\n//       }\n//     } catch (error) {\n//       console.error('Error occurred during login:', error);\n//       alert('Failed to authenticate. Please try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const logoutUser = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     setIsAdmin(false);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n\n//   useEffect(() => {\n//     if (authTokens) {\n//       setUser(jwtDecode(authTokens.access_token));\n//     }\n//     setLoading(false);\n//   }, [authTokens]);\n\n//   return { user, isAdmin, loginUser, logoutUser, loading };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\n\n// ____________________________________________\n\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  const loginUser = async (username, password) => {\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/token/', {\n        username,\n        password\n      });\n      const data = response.data;\n      if (response.status === 200 && data.access_token) {\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access_token));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n        navigate('/');\n      } else {\n        alert('Something went wrong!');\n      }\n    } catch (error) {\n      console.error('Error occurred during login:', error);\n      alert('Failed to authenticate. Please try again.');\n    }\n  };\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    navigate('/login');\n  };\n  useEffect(() => {\n    const tokens = JSON.parse(localStorage.getItem('authTokens'));\n    if (tokens && tokens.access) {\n      setAuthTokens(tokens);\n      setUser(jwtDecode(tokens.access_token));\n    }\n  }, []);\n  const authValues = {\n    authTokens,\n    setAuthTokens,\n    user,\n    loginUser,\n    logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authValues,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bADW474GE9R+P7s/sACyUq6I5JE=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","axios","jwtDecode","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authTokens","setAuthTokens","user","setUser","navigate","loginUser","username","password","response","post","data","status","access_token","localStorage","setItem","JSON","stringify","alert","error","console","logoutUser","removeItem","tokens","parse","getItem","access","authValues","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//   const [authTokens, setAuthTokens] = useState(null);\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAdmin, setIsAdmin] = useState(false);\r\n//   const [loading, setLoading] = useState(false)\r\n\r\n//   const navigate = useNavigate();\r\n//   const loginUser = async (username, password) => {\r\n//     setLoading(true);\r\n//     try {\r\n//         const response = await axios.post('/api/authentication/login', {\r\n//             username: username,\r\n//             password: password\r\n//         });\r\n\r\n//         const data = response.data;\r\n\r\n//         if (response.status === 200 && data.access_token) {\r\n//             setAuthTokens(data);\r\n//             setUser(jwtDecode(data.access_token));\r\n//             localStorage.setItem('authTokens', JSON.stringify(data));\r\n//             navigate('/');\r\n//         } else {\r\n//             alert('Something went wrong!');\r\n//         }\r\n//     } catch (error) {\r\n//         console.error('Error occurred during login:', error);\r\n//         alert('Failed to authenticate. Please try again.');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n// };\r\n\r\n//   const logoutUser = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     setIsAdmin(false);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   // const updateToken = async () => {\r\n//   //   console.log(\"Update token called\");\r\n//   //   try {\r\n//   //     const response = await fetch(\r\n//   //       \"http://127.0.0.1:8000/api/authentication/refresh\",\r\n//   //       {\r\n//   //         method: \"POST\",\r\n//   //         headers: {\r\n//   //           \"Content-Type\": \"application/json\",\r\n//   //         },\r\n//   //         body: JSON.stringify({\r\n//   //           refresh: authTokens.refresh_token,\r\n//   //         }),\r\n//   //       }\r\n//   //     );\r\n//   //     if (response.ok) {\r\n//   //       const data = await response.json();\r\n//   //       setAuthTokens(data);\r\n//   //       setUser(jwtDecode(data.access_token));\r\n//   //       localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//   //     } else {\r\n//   //       throw new Error(\"Failed to refresh token\");\r\n//   //     }\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Error occurred during token refresh:\", error);\r\n//   //     logoutUser();\r\n//   //   }\r\n//   // };\r\n\r\n//   useEffect(() => {\r\n\r\n//     if(authTokens){\r\n//       setUser(jwtDecode(authTokens.access_token))\r\n//     }  \r\n//      setLoading(false)\r\n// }, [authTokens]);\r\n\r\n// return { user,isAdmin, loginUser, logoutUser, loading };\r\n// };\r\n\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n// // -----------------------------------------------\r\n\r\n\r\n\r\n\r\n// import axios from 'axios'; // Update this line\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { createContext, useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import dayjs from 'dayjs';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//   const [authTokens, setAuthTokens] = useState(null);\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAdmin, setIsAdmin] = useState(false);\r\n//   const [loading, setLoading] = useState(false)\r\n\r\n//   const navigate = useNavigate();\r\n//   const loginUser = async (username, password) => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await axios.post('/api/authentication/login', {\r\n//         username: username,\r\n//         password: password\r\n//       });\r\n\r\n//       const data = response.data;\r\n\r\n//       if (response.status === 200 && data.access_token) {\r\n//         setAuthTokens(data);\r\n//         setUser(jwtDecode(data.access_token));\r\n//         localStorage.setItem('authTokens', JSON.stringify(data));\r\n//         navigate('/');\r\n//       } else {\r\n//         alert('Something went wrong!');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error occurred during login:', error);\r\n//       alert('Failed to authenticate. Please try again.');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const logoutUser = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     setIsAdmin(false);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (authTokens) {\r\n//       setUser(jwtDecode(authTokens.access_token));\r\n//     }\r\n//     setLoading(false);\r\n//   }, [authTokens]);\r\n\r\n//   return { user, isAdmin, loginUser, logoutUser, loading };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n// ____________________________________________\r\n\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [authTokens, setAuthTokens] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const loginUser = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/api/token/', {\r\n        username,\r\n        password\r\n      });\r\n\r\n      const data = response.data;\r\n\r\n      if (response.status === 200 && data.access_token) {\r\n        setAuthTokens(data);\r\n        setUser(jwtDecode(data.access_token));\r\n        localStorage.setItem('authTokens', JSON.stringify(data));\r\n        navigate('/');\r\n      } else {\r\n        alert('Something went wrong!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error occurred during login:', error);\r\n      alert('Failed to authenticate. Please try again.');\r\n    }\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem('authTokens');\r\n    navigate('/login');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tokens = JSON.parse(localStorage.getItem('authTokens'));\r\n    if (tokens && tokens.access) {\r\n      setAuthTokens(tokens);\r\n      setUser(jwtDecode(tokens.access_token));\r\n    }\r\n  }, []);\r\n\r\n  const authValues = {\r\n    authTokens,\r\n    setAuthTokens,\r\n    user,\r\n    loginUser,\r\n    logoutUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authValues}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMe,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,kCAAkC,EAAE;QACpEH,QAAQ;QACRC;MACF,CAAC,CAAC;MAEF,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAE1B,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAID,IAAI,CAACE,YAAY,EAAE;QAChDX,aAAa,CAACS,IAAI,CAAC;QACnBP,OAAO,CAACX,SAAS,CAACkB,IAAI,CAACE,YAAY,CAAC,CAAC;QACrCC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;QACxDN,QAAQ,CAAC,GAAG,CAAC;MACf,CAAC,MAAM;QACLa,KAAK,CAAC,uBAAuB,CAAC;MAChC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDD,KAAK,CAAC,2CAA2C,CAAC;IACpD;EACF,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvBnB,aAAa,CAAC,IAAI,CAAC;IACnBE,OAAO,CAAC,IAAI,CAAC;IACbU,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;IACrCjB,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,MAAMgC,MAAM,GAAGP,IAAI,CAACQ,KAAK,CAACV,YAAY,CAACW,OAAO,CAAC,YAAY,CAAC,CAAC;IAC7D,IAAIF,MAAM,IAAIA,MAAM,CAACG,MAAM,EAAE;MAC3BxB,aAAa,CAACqB,MAAM,CAAC;MACrBnB,OAAO,CAACX,SAAS,CAAC8B,MAAM,CAACV,YAAY,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,UAAU,GAAG;IACjB1B,UAAU;IACVC,aAAa;IACbC,IAAI;IACJG,SAAS;IACTe;EACF,CAAC;EAED,oBACEzB,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAEF,UAAW;IAAA5B,QAAA,EACrCA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjC,EAAA,CAxDIF,YAAY;EAAA,QAGCJ,WAAW;AAAA;AAAAwC,EAAA,GAHxBpC,YAAY;AA0DlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}