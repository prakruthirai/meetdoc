{"ast":null,"code":"// import React, { createContext, useEffect, useState } from 'react';\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from 'react-router-dom';\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//     const [authTokens, setAuthTokens] = useState(null);\n//     const [user, setUser] = useState(null);\n\n//     const navigate = useNavigate();\n\n//     const loginUser = async (username, password) => {\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'username': username,\n//                     'password': password\n//                 })\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Failed to authenticate');\n//             }\n//             const data = await response.json();\n//             if(response.status === 200){\n//                 setAuthTokens(data);\n//                 setUser(jwtDecode(data.access));\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\n//                 navigate('/');\n//             } else {\n//                 alert('Something went wrong!!');\n//             }\n//         } catch (error) {\n//             console.error('Error occurred during login:', error);\n//         }\n//     };\n\n//     const logoutUser = () => {\n//         setAuthTokens(null);\n//         setUser(null);\n//         localStorage.removeItem('authTokens');\n//         navigate('/login');\n//     };\n\n//     const updateToken = async () => {\n//         console.log('Update token called');\n//         try {\n//             const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify({\n//                     'refresh': authTokens.refresh\n//                 })\n//             });\n//             if(response.status === 200) {\n//                 const data = await response.json();\n//                 setAuthTokens(data);\n//                 setUser(jwtDecode(data.access));\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\n//             } else {\n//                 logoutUser();\n//             }\n//         } catch (error) {\n//             console.error('Error occurred during token refresh:', error);\n//             logoutUser();\n//         }\n//     };\n\n//     useEffect(() => {\n//         let interval = setInterval(() => {\n//             if(authTokens) {\n//                 updateToken();\n//             }\n//         }, 2000);\n//         return () => clearInterval(interval);\n//     }, [authTokens, updateToken]);\n\n//     return { user, loginUser, logoutUser };\n// };\n\n// const AuthProvider = ({ children }) => {\n//     const auth = useAuth();\n//     return (\n//         <AuthContext.Provider value={auth}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n\n// export { AuthContext, AuthProvider };\n\nimport React, { createContext, useEffect, useState } from 'react';","map":{"version":3,"names":["React","createContext","useEffect","useState"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from 'react';\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//     const [authTokens, setAuthTokens] = useState(null);\r\n//     const [user, setUser] = useState(null);\r\n\r\n//     const navigate = useNavigate();\r\n\r\n//     const loginUser = async (username, password) => {\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'username': username,\r\n//                     'password': password\r\n//                 })\r\n//             });\r\n//             if (!response.ok) {\r\n//                 throw new Error('Failed to authenticate');\r\n//             }\r\n//             const data = await response.json();\r\n//             if(response.status === 200){\r\n//                 setAuthTokens(data);\r\n//                 setUser(jwtDecode(data.access));\r\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\r\n//                 navigate('/');\r\n//             } else {\r\n//                 alert('Something went wrong!!');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error occurred during login:', error);\r\n//         }\r\n//     };\r\n\r\n//     const logoutUser = () => {\r\n//         setAuthTokens(null);\r\n//         setUser(null);\r\n//         localStorage.removeItem('authTokens');\r\n//         navigate('/login');\r\n//     };\r\n\r\n//     const updateToken = async () => {\r\n//         console.log('Update token called');\r\n//         try {\r\n//             const response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     'refresh': authTokens.refresh\r\n//                 })\r\n//             });\r\n//             if(response.status === 200) {\r\n//                 const data = await response.json();\r\n//                 setAuthTokens(data);\r\n//                 setUser(jwtDecode(data.access));\r\n//                 localStorage.setItem('authTokens', JSON.stringify(data));\r\n//             } else {\r\n//                 logoutUser();\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error occurred during token refresh:', error);\r\n//             logoutUser();\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         let interval = setInterval(() => {\r\n//             if(authTokens) {\r\n//                 updateToken();\r\n//             }\r\n//         }, 2000);\r\n//         return () => clearInterval(interval);\r\n//     }, [authTokens, updateToken]);\r\n\r\n//     return { user, loginUser, logoutUser };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//     const auth = useAuth();\r\n//     return (\r\n//         <AuthContext.Provider value={auth}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}