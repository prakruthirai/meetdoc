{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAKRUTHI\\\\OneDrive\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useEffect, useState } from \"react\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const AuthContext = createContext();\n\n// const useAuth = () => {\n//   const [authTokens, setAuthTokens] = useState(null);\n//   const [user, setUser] = useState(null);\n\n//   const navigate = useNavigate();\n//   const loginUser = async (username, password) => {\n//     try {\n//         const response = await fetch(\n//             \"http://127.0.0.1:8000/api/authentication/login\",\n//             {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({\n//                     username: username,\n//                     password: password,\n//                 }),\n//             }\n//         );\n\n//         if (!response.ok) {\n//             throw new Error(\"Failed to authenticate\");\n//         }\n\n//         const data = await response.json();\n//         console.log(\"Response data:\", data);\n\n//         if (data && data.data && data.data.access_token) {\n//             setAuthTokens(data.data);\n//             setUser(jwtDecode(data.data.access_token));\n//             localStorage.setItem(\"authTokens\", JSON.stringify(data.data));\n//             navigate(\"/\");\n//         } else {\n//             console.error(\"Invalid token received:\", data.data.access_token);\n//             throw new Error(\"Invalid token received\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error occurred during login:\", error);\n//         alert(\"Failed to authenticate. Please try again.\");\n//     }\n// };\n\n//   const logoutUser = () => {\n//     setAuthTokens(null);\n//     setUser(null);\n//     localStorage.removeItem(\"authTokens\");\n//     navigate(\"/login\");\n//   };\n\n//   const updateToken = async () => {\n//     console.log(\"Update token called\");\n//     try {\n//       const response = await fetch(\n//         \"http://127.0.0.1:8000/api/authentication/refresh\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             refresh: authTokens.refresh_token,\n//           }),\n//         }\n//       );\n//       if (response.ok) {\n//         const data = await response.json();\n//         setAuthTokens(data);\n//         setUser(jwtDecode(data.access_token));\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//       } else {\n//         throw new Error(\"Failed to refresh token\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error occurred during token refresh:\", error);\n//       logoutUser();\n//     }\n//   };\n\n//   return { user, loginUser, logoutUser };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\n\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { useNavigate } from 'react-router-dom';\nimport baseURL from \"../Api/Config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const tokens = JSON.parse(localStorage.getItem('authTokens'));\n    if (tokens && tokens.access) {\n      setAuthTokens(tokens);\n      setUser(jwtDecode(tokens.access));\n    }\n  }, []);\n  const refreshTokens = async () => {\n    try {\n      // Check if authTokens is null\n      if (!authTokens) {\n        console.error('User is not authenticated.');\n        return false;\n      }\n      const response = await axios.post(`${baseURL}/api/authentication/refresh`, {\n        refresh: authTokens.refresh\n      });\n      const data = response.data;\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      setAuthTokens(data[\"data\"]);\n      setUser(jwtDecode(data[\"data\"][\"access_token\"]));\n      console.log('Token refreshed successfully');\n      return true;\n    } catch (error) {\n      console.error('Error occurred during token refresh:', error);\n      return false;\n    }\n  };\n  const loginUser = async (username, password) => {\n    try {\n      const response = await axios.post(`${baseURL}/api/authentication/login`, {\n        username,\n        password\n      });\n      const data = response.data;\n      // console.log();\n      if (response.status === 200 && data[\"data\"][\"access_token\"]) {\n        setAuthTokens(data[\"data\"]);\n        setUser(jwtDecode(data[\"data\"][\"access_token\"]));\n        localStorage.setItem('authTokens', JSON.stringify(data));\n        navigate('/');\n        return true;\n      } else {\n        alert('Something went wrong!');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error occurred during login:', error);\n      alert('Failed to authenticate. Please try again.');\n      return false;\n    }\n  };\n  const logoutUser = async () => {\n    try {\n      const response = await axios.post(`${baseURL}/api/authentication/logout`, {\n        refresh_token: authTokens.refresh\n      });\n      if (response.status === 200 || response.status === 204) {\n        // Logout successful\n        // console.log()\n        setAuthTokens(null);\n        setUser(null);\n        localStorage.removeItem('authTokens');\n        navigate('/login');\n      } else {\n        // Handle unexpected response status\n        console.error('Unexpected response while logging out:', response);\n      }\n    } catch (error) {\n      // Handle network errors or other exceptions\n      console.error('Error occurred during logout:', error);\n      // You may also want to provide user-friendly feedback here\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authTokens,\n      user,\n      loginUser,\n      logoutUser,\n      refreshTokens\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bADW474GE9R+P7s/sACyUq6I5JE=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","axios","jwtDecode","useNavigate","baseURL","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authTokens","setAuthTokens","user","setUser","navigate","tokens","JSON","parse","localStorage","getItem","access","refreshTokens","console","error","response","post","refresh","data","setItem","stringify","log","loginUser","username","password","status","alert","logoutUser","refresh_token","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAKRUTHI/OneDrive/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from \"react\";\r\n// import { jwtDecode } from \"jwt-decode\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const AuthContext = createContext();\r\n\r\n// const useAuth = () => {\r\n//   const [authTokens, setAuthTokens] = useState(null);\r\n//   const [user, setUser] = useState(null);\r\n\r\n//   const navigate = useNavigate();\r\n//   const loginUser = async (username, password) => {\r\n//     try {\r\n//         const response = await fetch(\r\n//             \"http://127.0.0.1:8000/api/authentication/login\",\r\n//             {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     username: username,\r\n//                     password: password,\r\n//                 }),\r\n//             }\r\n//         );\r\n\r\n//         if (!response.ok) {\r\n//             throw new Error(\"Failed to authenticate\");\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         console.log(\"Response data:\", data);\r\n\r\n//         if (data && data.data && data.data.access_token) {\r\n//             setAuthTokens(data.data);\r\n//             setUser(jwtDecode(data.data.access_token));\r\n//             localStorage.setItem(\"authTokens\", JSON.stringify(data.data));\r\n//             navigate(\"/\");\r\n//         } else {\r\n//             console.error(\"Invalid token received:\", data.data.access_token);\r\n//             throw new Error(\"Invalid token received\");\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error occurred during login:\", error);\r\n//         alert(\"Failed to authenticate. Please try again.\");\r\n//     }\r\n// };\r\n\r\n\r\n\r\n//   const logoutUser = () => {\r\n//     setAuthTokens(null);\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"authTokens\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   const updateToken = async () => {\r\n//     console.log(\"Update token called\");\r\n//     try {\r\n//       const response = await fetch(\r\n//         \"http://127.0.0.1:8000/api/authentication/refresh\",\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             refresh: authTokens.refresh_token,\r\n//           }),\r\n//         }\r\n//       );\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         setAuthTokens(data);\r\n//         setUser(jwtDecode(data.access_token));\r\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//       } else {\r\n//         throw new Error(\"Failed to refresh token\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error occurred during token refresh:\", error);\r\n//       logoutUser();\r\n//     }\r\n//   };\r\n\r\n//   return { user, loginUser, logoutUser };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { useNavigate } from 'react-router-dom'; \r\nimport baseURL from \"../Api/Config\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [authTokens, setAuthTokens] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const navigate = useNavigate(); \r\n\r\n  useEffect(() => {\r\n    const tokens = JSON.parse(localStorage.getItem('authTokens'));\r\n    if (tokens && tokens.access) {\r\n      setAuthTokens(tokens);\r\n      setUser(jwtDecode(tokens.access));\r\n    }\r\n  }, []);\r\n\r\n  const refreshTokens = async () => {\r\n    try {\r\n      // Check if authTokens is null\r\n      if (!authTokens) {\r\n        console.error('User is not authenticated.');\r\n        return false;\r\n      }\r\n  \r\n      const response = await axios.post(`${baseURL}/api/authentication/refresh`, {\r\n        refresh: authTokens.refresh\r\n      });\r\n  \r\n      const data = response.data;\r\n      localStorage.setItem('authTokens', JSON.stringify(data));\r\n      setAuthTokens(data[\"data\"]);\r\n      setUser(jwtDecode(data[\"data\"][\"access_token\"]));\r\n      console.log('Token refreshed successfully');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error occurred during token refresh:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const loginUser = async (username, password) => {\r\n    try {\r\n      const response = await axios.post(`${baseURL}/api/authentication/login`, {\r\n        username,\r\n        password\r\n      });\r\n\r\n      const data = response.data;\r\n      // console.log();\r\n      if (response.status === 200 && data[\"data\"][\"access_token\"]) {\r\n        setAuthTokens(data[\"data\"]);\r\n        setUser(jwtDecode(data[\"data\"][\"access_token\"]));\r\n        localStorage.setItem('authTokens', JSON.stringify(data));\r\n        navigate('/'); \r\n        return true;\r\n      } else {\r\n        alert('Something went wrong!');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error occurred during login:', error);\r\n      alert('Failed to authenticate. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logoutUser = async () => {\r\n    try {\r\n      const response = await axios.post(`${baseURL}/api/authentication/logout`, {\r\n        refresh_token: authTokens.refresh\r\n      });\r\n  \r\n      if (response.status === 200 || response.status === 204) {\r\n        // Logout successful\r\n        // console.log()\r\n        setAuthTokens(null);\r\n        setUser(null);\r\n        localStorage.removeItem('authTokens');\r\n        navigate('/login');\r\n      } else {\r\n        // Handle unexpected response status\r\n        console.error('Unexpected response while logging out:', response);\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors or other exceptions\r\n      console.error('Error occurred during logout:', error);\r\n      // You may also want to provide user-friendly feedback here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authTokens, user, loginUser, logoutUser, refreshTokens }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}