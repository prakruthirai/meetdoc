{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anusha ps\\\\Desktop\\\\meetdoc\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst useAuth = () => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n\n  //   const loginUser = async (username, password) => {\n  //     try {\n  //       const response = await fetch(\n  //         \"http://127.0.0.1:8000/api/authentication/login\",\n  //         {\n  //           method: \"POST\",\n  //           headers: {\n  //             \"Content-Type\": \"application/json\",\n  //           },\n  //           body: JSON.stringify({\n  //             username: username,\n  //             password: password,\n  //           }),\n  //         }\n  //       );\n  //       if (!response.ok) {\n  //         throw new Error(\"Failed to authenticate\");\n  //       }\n  //       const data = await response.json();\n  //       console.log(\"Response data:\", data); // Log the response data\n  //       if (data && data.access_token) {\n  //         setAuthTokens(data);\n  //         setUser(jwtDecode(data.access_token));\n  //         localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  //         navigate(\"/\");\n  //       } else {\n  //         console.error(\"Invalid token received:\", data.access_token);\n  //         throw new Error(\"Invalid token received\");\n  //       }\n  //     //   if (response.status === 200) {\n  //     //     setAuthTokens(data);\n  //     //     setUser(jwtDecode(data.access));\n  //     //     localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  //     //     navigate(\"/\");\n  //     //   } else {\n  //     //     alert(\"Something went wrong!!\");\n  //     //   }\n  //     } catch (error) {\n  //         console.error('Error occurred during login:', error);\n  //         alert('Failed to authenticate. Please try again.');\n  //     }\n  //   };\n\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n    navigate(\"/login\");\n  };\n  const updateToken = async () => {\n    console.log(\"Update token called\");\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/api/authentication/refresh\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh: authTokens.refresh_token\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access_token));\n        localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      } else {\n        throw new Error(\"Failed to refresh token\");\n      }\n    } catch (error) {\n      console.error(\"Error occurred during token refresh:\", error);\n      logoutUser();\n    }\n  };\n  return {\n    user,\n    loginUser,\n    logoutUser\n  };\n};\n_s(useAuth, \"CQraQm0Fw9B8sOZAN63sTjtLtHk=\", false, function () {\n  return [useNavigate];\n});\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const auth = useAuth();\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"YuJWYXaKIY31b1y7U6yy3IXSxQA=\", false, function () {\n  return [useAuth];\n});\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n//       if (response.status === 200) {\n//         const data = await response.json();\n//         setAuthTokens(data);\n//         setUser(jwtDecode(data.access));\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\n//       } else {\n//         logoutUser();\n//       }\n//     } catch (error) {\n//       console.error(\"Error occurred during token refresh:\", error);\n//       logoutUser();\n//     }\n//   };\n\n//   useEffect(() => {\n//     let interval = setInterval(() => {\n//       if (authTokens) {\n//         updateToken();\n//       }\n//     }, 86400000);\n//     return () => clearInterval(interval);\n//   }, [authTokens]);\n\n//   return { user, loginUser, logoutUser };\n// };\n\n// const AuthProvider = ({ children }) => {\n//   const auth = useAuth();\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n// };\n\n// export { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jwtDecode","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","authTokens","setAuthTokens","user","setUser","navigate","logoutUser","localStorage","removeItem","updateToken","console","log","response","fetch","method","headers","body","JSON","stringify","refresh","refresh_token","ok","data","json","access_token","setItem","Error","error","loginUser","AuthProvider","children","_s2","auth","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/anusha ps/Desktop/meetdoc/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst useAuth = () => {\r\n  const [authTokens, setAuthTokens] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n//   const loginUser = async (username, password) => {\r\n//     try {\r\n//       const response = await fetch(\r\n//         \"http://127.0.0.1:8000/api/authentication/login\",\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             username: username,\r\n//             password: password,\r\n//           }),\r\n//         }\r\n//       );\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to authenticate\");\r\n//       }\r\n//       const data = await response.json();\r\n//       console.log(\"Response data:\", data); // Log the response data\r\n//       if (data && data.access_token) {\r\n//         setAuthTokens(data);\r\n//         setUser(jwtDecode(data.access_token));\r\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//         navigate(\"/\");\r\n//       } else {\r\n//         console.error(\"Invalid token received:\", data.access_token);\r\n//         throw new Error(\"Invalid token received\");\r\n//       }\r\n//     //   if (response.status === 200) {\r\n//     //     setAuthTokens(data);\r\n//     //     setUser(jwtDecode(data.access));\r\n//     //     localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//     //     navigate(\"/\");\r\n//     //   } else {\r\n//     //     alert(\"Something went wrong!!\");\r\n//     //   }\r\n//     } catch (error) {\r\n//         console.error('Error occurred during login:', error);\r\n//         alert('Failed to authenticate. Please try again.');\r\n//     }\r\n//   };\r\n\r\n\r\n  const logoutUser = () => {\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"authTokens\");\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  const updateToken = async () => {\r\n    console.log(\"Update token called\");\r\n    try {\r\n      const response = await fetch(\r\n        \"http://127.0.0.1:8000/api/authentication/refresh\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            refresh: authTokens.refresh_token,\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setAuthTokens(data);\r\n        setUser(jwtDecode(data.access_token));\r\n        localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n      } else {\r\n        throw new Error(\"Failed to refresh token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error occurred during token refresh:\", error);\r\n      logoutUser();\r\n    }\r\n  };\r\n\r\n  return { user, loginUser, logoutUser };\r\n};\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const auth = useAuth();\r\n  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n//       if (response.status === 200) {\r\n//         const data = await response.json();\r\n//         setAuthTokens(data);\r\n//         setUser(jwtDecode(data.access));\r\n//         localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n//       } else {\r\n//         logoutUser();\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error occurred during token refresh:\", error);\r\n//       logoutUser();\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     let interval = setInterval(() => {\r\n//       if (authTokens) {\r\n//         updateToken();\r\n//       }\r\n//     }, 86400000);\r\n//     return () => clearInterval(interval);\r\n//   }, [authTokens]);\r\n\r\n//   return { user, loginUser, logoutUser };\r\n// };\r\n\r\n// const AuthProvider = ({ children }) => {\r\n//   const auth = useAuth();\r\n//   return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}